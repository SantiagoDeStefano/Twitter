openapi: 3.0.4
info:
  title: Twitter clone TypeScript - 2025
  description: |-
    This API provides the backend services for a social media platform similar to Twitter.  
    It includes features for user authentication and profile management, media upload and streaming, 
    tweet creation and interaction, search functionality, and real-time conversations.  
    The system is built with scalability, security, and modern REST API design principles in mind.
    Some useful links:
    - [The Twitter's clone repository](https://github.com/SantiagoDeStefano/Twitter)
    - [The source API definition for the Twitter's clone](https://github.com/SantiagoDeStefano/Twitter/blob/master/twitter-swagger.yaml)
  contact:
    email: ngpham.2807@gmail.com
  version: 0.0.1
servers:
  - url: http://localhost:4000
    description: Local server
tags:
  - name: users
    description: Everything about Users's requests
  - name: medias
    description: Everything about Medias's requests
  - name: serves
    description: Serve static files images and videos
  - name: tweets
    description: Everything about Tweets's requests
  - name: bookmarks
    description: Everything about Bookmarks's requests
  - name: likes
    description: Everything about Likes's requests
  - name: search
    description: Everything about Search's requests
  - name: conversations
    description: Everything about Conversations's requests
paths:  
  /users/login:
    post:
      tags:
        - users
      summary: Logs user into the system
      operationId: loginUser
      requestBody:
        description: The user login credentials
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginBody'
      responses:
        '200':
          description: Login successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Login successfully
                  data:
                    $ref: '#/components/schemas/AuthenticateSuccessfully'

        '422':
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Validation error'
                  errors:
                    type: object
                    properties:
                      email:
                        type: object
                        properties:
                          type:
                            type: string
                            example: 'field'
                          value:
                            type: string
                            example: 'Non-existent-Email@gmail.com'
                          msg:
                            type: string
                            example: 'Email or password is incorrect'
                          path:
                            type: string
                            example: 'email'
                          location:
                            type: string
                            example: 'body'
      security: []
  /users/register:
    post:
      tags:
        - users
      summary: Registers a new user
      operationId: registerUser
      requestBody:
        description: The user registration credentials
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterBody'
      responses:
        '200':
          description: User registered successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: User registered successfully
                  result:
                    type: object
                    properties:
                      access_token:
                        type: string
                        example: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNjg0NmE5MjJjOGQ2YzYwYzI5ZWM5MmQzIiwidG9rZW5fdHlwZSI6MCwidmVyaWZ5IjoxLCJpYXQiOjE3NTI1ODk5MzYsImV4cCI6MTc1MjU4OTk2Nn0.N0NpQZDcu-gMpXLApVimd0etDPJoz7cp6ksGsdbP1WA'
                      refresh_token:
                        type: string
                        example: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNjg0NmE5MjJjOGQ2YzYwYzI5ZWM5MmQzIiwidG9rZW5fdHlwZSI6MSwidmVyaWZ5IjoxLCJpYXQiOjE3NTI1ODk5MzYsImV4cCI6MTc2MTIyOTkzNn0.C4W_Me1Di-owhrpj1VJ6j-ImoPtWMy6QMPT6R-uJ4a8'
                      email_verify_token:
                        type: string
                        example: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNjg3ZjU3M2ZiNzM1MGI5YWNmNzEwMzliIiwidG9rZW5fdHlwZSI6MywidmVyaWZ5IjowLCJpYXQiOjE3NTMxNzU4NzEsImV4cCI6MTc1Mzc4MDY3MX0.tiVewOpNKkFJejjBqg8MikYhLL_GvgRskBIYTVqG0Eg'
        '422':
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Validation error'
                  errors:
                    type: object
                    properties:
                      email:
                        type: object
                        properties:
                          type:
                            type: string
                            example: 'field'
                          value:
                            type: string
                            example: 'ngpham82@gmail.com'
                          msg:
                            type: string
                            example: 'Email already exists'
                          path:
                            type: string
                            example: 'email'
                          location:
                            type: string
                            example: 'body'
  /users/refresh-token:
    post:
      tags:
        - users
      summary: Refreshes the access token
      operationId: refreshToken
      requestBody:
        description: The refresh token to be used for generating a new access token
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                refresh_token:
                  type: string
                  example: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNjg0NmE5MjJjOGQ2YzYwYzI5ZWM5MmQzIiwidG9rZW5fdHlwZSI6MSwidmVyaWZ5IjoxLCJpYXQiOjE3NTI1ODk5MzYsImV4cCI6MTc2MTIyOTkzNn0.C4W_Me1Di-owhrpj1VJ6j-ImoPtWMy6QMPT6R-uJ4a8'
      responses:
        '200':
          description: Get new access token
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: New tokens returned successfully
                  result:
                    $ref: '#/components/schemas/AuthenticateSuccessfully'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Used refresh token or does not exist'
  /users/logout:
    post:
      tags:
        - users
      summary: Logs out the current user
      operationId: logoutUser
      requestBody:
        description: The logout request does not require a body
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                refresh_token:
                  type: string
                  example: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNjg0Y2UzN2Q4MzY0MmNlM2ZlMmMxZWIzIiwidG9rZW5fdHlwZSI6MSwidmVyaWZ5IjoxLCJpYXQiOjE3NTMyODUwNDQsImV4cCI6MTc1NDU4MTA0NH0.8iQbK7lvM7_KqypTvRYFsiDTAx2UTtpxJG79p777XU4'
              required:
                - refresh_token
      security:
        - BearerAuth: []
      responses:
        '200':
          description: User logged out successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Logout successfully'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Used refresh token or does not exist'
  /users/verify-email:
    post:
      tags:
        - users
      summary: Verify user email through SES
      operationId: verifyEmail
      requestBody:
        description: The email verification token
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email_verify_token:
                  type: string
                  example: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNjg4MTAyYjcwN2RlYjI1MWE4MzAxYjY0IiwidG9rZW5fdHlwZSI6MywidmVyaWZ5IjowLCJpYXQiOjE3NTMyODUzMDMsImV4cCI6MTc1Mzg5MDEwM30.-LafPF4V9FDHU6Ondluf5C8Gc3yh8O9pQTEn9HXanmE'
      responses:
        '200':
          description: Email verified successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Email verified successfully'
                  result:
                    $ref: '#/components/schemas/AuthenticateSuccessfully'

        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Email verify token is required'
  /users/resend-verify-email:
    post:
      tags:
        - users
      summary: Resend email verification through SES
      operationId: resendEmailVerify
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Email verification sent successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    type: object
                    properties:
                      message:
                        type: string
                        example: 'Resend verify email success'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Access token is required'
  /users/forgot-password:
    post:
      tags:
        - users
      summary: Request password reset
      operationId: forgotPassword
      requestBody:
        description: The email to send the password reset token
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: 'ngpham81@gmail.com'
      responses:
        '200':
          description: Password reset token sent successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    type: object
                    properties:
                      message:
                        type: string
                        example: 'Check your email for the password reset token'
                      forgot_password_token:
                        type: string
                        example: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNjg0NmE5MjJjOGQ2YzYwYzI5ZWM5MmQzIiwidG9rZW5fdHlwZSI6MiwidmVyaWZ5IjoxLCJpYXQiOjE3NTMzMzA3MDgsImV4cCI6MTc1MzQxNzEwOH0.HV6PAzBoEM6vmQ3o4qXSsC_BBJVsO6ws4SUa7CvobhM'
        '422':
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Validation error'
                  errors:
                    type: object
                    properties:
                      email:
                        type: object
                        properties:
                          type:
                            type: string
                            example: 'field'
                          value:
                            type: string
                            example: 'Non-existent-Email@gmail.com'
                          msg:
                            type: string
                            example: 'User not found'
                          path:
                            type: string
                            example: 'email'
                          location:
                            type: string
                            example: 'body'
  /users/verify-forgot-password:
    post:
      tags:
        - users
      summary: Verify forgot password token
      operationId: verifyForgotPasswordToken
      requestBody:
        description: The forgot password token to verify
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                forgot_password_token:
                  type: string
                  example: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNjg0NmE5MjJjOGQ2YzYwYzI5ZWM5MmQzIiwidG9rZW5fdHlwZSI6MiwidmVyaWZ5IjoxLCJpYXQiOjE3NTMzMzA3MDgsImV4cCI6MTc1MzQxNzEwOH0.HV6PAzBoEM6vmQ3o4qXSsC_BBJVsO6ws4SUa7CvobhM'
      responses:
        '200':
          description: Forgot password token verified successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Verify forgot password success'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Jwt expired'
  /users/reset-password:
    post:
      tags:
        - users
      summary: Send forgot password token through SES
      operationId: resetPassword
      requestBody:
        description: The new password and confirmation
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                forgot_password_token:
                  type: string
                  example: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNjg0NmE5MjJjOGQ2YzYwYzI5ZWM5MmQzIiwidG9rZW5fdHlwZSI6MiwidmVyaWZ5IjoxLCJpYXQiOjE3NTMzMzIzMjEsImV4cCI6MTc1MzQxODcyMX0.C_nF9pAdRvQzdQvDn2k_hxGxuElq_qohwgVVOtQmhw4'
                password:
                  type: string
                  example: 'NewPassword123!'
                confirm_password:
                  type: string
                  example: 'NewPassword123!'
      responses:
        '200':
          description: Password reset successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    type: object
                    properties:
                      message:
                        type: string
                        example: 'Reset password successfully'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Invalid forgot password token'
        '422':
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Validation error'
                  errors:
                    type: object
                    properties:
                      confirm_password:
                        type: object
                        properties:
                          type:
                            type: string
                            example: 'field'
                          value:
                            type: string
                            example: 'NewPassword123!'
                          msg:
                            type: string
                            example: 'Password confirmation does not match password'
                          path:
                            type: string
                            example: 'confirm_password'
                          location:
                            type: string
                            example: 'body'
  /users/me:
    get:
      tags:
        - users
      summary: Get current user information
      operationId: getCurrentUser
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Current user information retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg:
                    type: string
                    example: 'Get my profile success'
                  result:
                    $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Access token is required'
    patch:
      tags:
        - users
      summary: Update current user information
      operationId: updateCurrentUser
      security:
        - BearerAuth: []
      requestBody:
        description: The user information to update
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: 'Updated name'
                bio:
                  type: string
                  example: 'Updated bio'
      responses:
        '200':
          description: User information updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg:
                    type: string
                    example: 'Update profile success'
                  result:
                    $ref: '#/components/schemas/User'
        '422':
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Validation error'
                  errors:
                    type: object
                    properties:
                      bio:
                        type: object
                        properties:
                          type:
                            type: string
                            example: 'field'
                          value:
                            type: string
                            example: ''
                          msg:
                            type: string
                            example: 'Bio must be between 1 and 160 characters'
                          path:
                            type: string
                            example: 'bio'
                          location:
                            type: string
                            example: 'body'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'User not verified'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Access token is required'
  /users/{user_id}:
    get:
      tags:
        - users
      summary: Get user information by user ID
      operationId: getUserById
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: string
            example: 'user67ef503ba7f350002d994cdb'
      responses:
        '200':
          description: Get profile successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Get profile successfully
                  result:
                    type: object
                    properties:
                      _id:
                        type: string
                        format: MongoDB ObjectId
                        example: 67ef503ba7f350002d994cdb
                      name:
                        type: string
                        example: Phuong
                      email:
                        type: string
                        example: ngpham35@gmail.com
                      date_of_birth:
                        type: string
                        format: ISO8601
                        example: '2020-06-06T08:26:33.781Z'
                      bio:
                        type: string
                        example: ''
                      location:
                        type: string
                        example: ''
                      website:
                        type: string
                        example: ''
                      username:
                        type: string
                        example: user67ef503ba7f350002d994cdb
                      avatar:
                        type: string
                        example: ''
                      cover_photo:
                        type: string
                        example: ''
        '404':
          description: User not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'User not found'
  /users/follow:
    post:
      tags:
        - users
      summary: Follow a user
      operationId: followUser
      security:
        - BearerAuth: []
      requestBody:
        description: The user ID to follow
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                user_id:
                  type: string
                  format: MongoDB ObjectId
                  example: '67ef503ba7f350002d994cdb'
      responses:
        '200':
          description: Follow successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    type: object
                    properties:
                      message:
                        type: string
                        example: 'Follow successfully'
              examples:
                followSuccess:
                  summary: Successful follow
                  value:
                    result:
                      message: 'Follow successfully'
                alreadyFollowing:
                  summary: Already following
                  value:
                    result:
                      message: 'Already followed'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Invalid user ID'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Access token is required'
  /users/follow/{user_id}:
    delete:
      tags:
        - users
      summary: Unfollow a user
      operationId: unfollowUser
      security:
        - BearerAuth: []
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: string
            format: MongoDB ObjectId
            example: '6825b42db002e112f232301c'
      responses:
        '200':
          description: Unfollow successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    type: object
                    properties:
                      message:
                        type: string
                        example: 'Unfollow successfully'
              examples:
                unfollowSuccess:
                  summary: Successful unfollow
                  value:
                    result:
                      message: 'Unfollow successfully'
                notFollowing:
                  summary: Not following the user
                  value:
                    result:
                      message: 'Already unfollowed or not following'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'User not verified'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Invalid user ID'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Access token is required'
  /users/change-password:
    put:
      tags:
        - users
      summary: Change user password
      operationId: changePassword
      security:
        - BearerAuth: []
      requestBody:
        description: The current password and new password
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                old_password:
                  type: string
                  example: 'CurrentPassword123!'
                new_password:
                  type: string
                  example: 'NewPassword123!'
                confirm_new_password:
                  type: string
                  example: 'NewPassword123!'
      responses:
        '200':
          description: Password changed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    type: object
                    properties:
                      message:
                        type: string
                        example: 'Change password successfully'
        '422':
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Validation error
                  errors:
                    type: object
                    properties:
                      confirm_new_password:
                        type: object
                        properties:
                          type:
                            type: string
                            example: field
                          value:
                            type: string
                            example: Phuong2872@@!
                          msg:
                            type: string
                            example: Password confirmation does not match password
                          path:
                            type: string
                            example: confirm_new_password
                          location:
                            type: string
                            example: body
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Old password does not match'
              examples:
                oldPasswordMismatch:
                  summary: Old password mismatch
                  value:
                    message: 'Old password does not match'
                accessTokenRequired:
                  summary: Access token required
                  value:
                    message: 'Access token is required'

  /medias/upload-image:
    post:
      tags:
        - medias
      summary: Upload an image to S3
      operationId: uploadImage
      security:
        - BearerAuth: []
      requestBody:
        description: The image file to upload
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                image:
                  type: string
                  format: binary
      responses:
        '200':
          description: Image uploaded successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Image uploaded successfully
                  result:
                    type: array
                    items:
                      type: object
                      properties:
                        url:
                          type: string
                          example: https://twitter-backend-ap-southeast-1.s3.ap-southeast-1.amazonaws.com/images/07594fb83ebdb5713d9443800.jpg
                        type:
                          allOf:
                            - $ref: '#/components/schemas/MediaType'
                          example: 0
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Access token is required'
  /medias/upload-video:
    post:
      tags:
        - medias
      summary: Upload a video to S3
      operationId: uploadVideo
      security:
        - BearerAuth: []
      requestBody:
        description: The video file to upload
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                video:
                  type: string
                  format: binary
      responses:
        '200':
          description: Video uploaded successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Video uploaded successfully
                  result:
                    type: array
                    items:
                      type: object
                      properties:
                        url:
                          type: string
                          example: https://twitter-backend-ap-southeast-1.s3.ap-southeast-1.amazonaws.com/videos/3KIG7c4HhgPFDnBP71JME.mp4
                        type:
                          allOf:
                            - $ref: '#/components/schemas/MediaType'
                          example: 1
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Access token is required'
  /medias/upload-video-hls:
    post:
      tags:
        - medias
      summary: Upload a video for HLS streaming to S3
      operationId: uploadVideoHLS
      security:
        - BearerAuth: []
      requestBody:
        description: The video file to upload for HLS streaming
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                video:
                  type: string
                  format: binary
      responses:
        '200':
          description: Video uploaded successfully for HLS streaming
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Video uploaded successfully for HLS streaming
                  result:
                    type: array
                    items:
                      type: object
                      properties:
                        url:
                          type: string
                          example: http://localhost:4000/static/video-hls/W70kbVFMWz6DdZ2LkB_1w/master.m3u8
                        type:
                          allOf:
                            - $ref: '#/components/schemas/MediaType'
                          example: 2
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Access token is required'
  /medias/video-status/{video_id}:
    get:
      tags:
        - medias
      summary: Get video status by video ID
      operationId: getVideoStatus
      security:
        - BearerAuth: []
      parameters:
        - name: video_id
          in: path
          required: true
          schema:
            type: string
            format: MongoDB ObjectId
            example: '684ce37d83642ce3fe2c1eb3'
      responses:
        '200':
          description: Video status retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Get video status successfully'
                  video_status:
                    allOf:
                      - $ref: '#/components/schemas/EncodingStatus'
                    example: 2
        '404':
          description: Video not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Video not found'
              examples:
                videoNotFound:
                  summary: Video not found
                  value:
                    message: 'Video not found'
                videoIdInvalid:
                  summary: Invalid video ID
                  value:
                    message: 'Invalid video ID'

  /static/image/{image_name}:
    get:
      tags:
        - serves
      summary: Serve image file
      operationId: getImageFile
      parameters:
        - name: image_name
          in: path
          required: true
          schema:
            type: string
            example: '07594fb83ebdb5713d9443800.jpg'
      responses:
        '204':
          description: No Content
  /static/video-stream/{video_name}:
    get:
      tags:
        - serves
      summary: Serve video stream
      operationId: getVideoStream
      parameters:
        - name: video_name
          in: path
          required: true
          schema:
            type: string
            example: '3KIG7c4HhgPFDnBP71JME.mp4'
      responses:
        '204':
          description: No Content
  /static/video-hls/{video_name}/master.m3u8:
    get:
      tags:
        - serves
      summary: Serve HLS video stream
      operationId: getHLSVideoStream
      parameters:
        - name: video_name
          in: path
          required: true
          schema:
            type: string
            example: 'W70kbVFMWz6DdZ2LkB_1w'
      responses:
        '200':
          description: HLS video stream retrieved successfully
          content:
            application/vnd.apple.mpegurl:
              schema:
                type: string
                example: '#EXTM3U
                  #EXT-X-VERSION:3
                  #EXT-X-STREAM-INF:BANDWIDTH=940957,AVERAGE-BANDWIDTH=878196,RESOLUTION=1280x720,CODECS="avc1.640032,mp4a.40.2"
                  v0/prog_index.m3u8'
  /static/video-hls/{id}/{v}/{segment}:
    get:
      tags:
        - serves
      summary: Serve HLS video segment
      operationId: getHLSVideoSegment
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            example: 'W70kbVFMWz6DdZ2LkB_1w'
        - name: v
          in: path
          required: true
          schema:
            type: string
            example: '0'
        - name: segment
          in: path
          required: true
          schema:
            type: string
            example: 'segment0.ts'
      responses:
        '204':
          description: No Content

  /tweets:
    post:
      tags:
        - tweets
      summary: Create a new tweet
      operationId: createTweet
      security:
        - BearerAuth: []
      requestBody:
        description: The tweet content and optional media
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                type:
                  allOf:
                    - $ref: '#/components/schemas/TweetType'
                  example: 2
                audience:
                  allOf:
                    - $ref: '#/components/schemas/TweetAudience'
                  example: 0
                content:
                  type: string
                  description: The text content of the tweet/comment
                  example: 'This is child comment, created for retweet test'
                parent_id:
                  type: string
                  format: MongoDB ObjectId
                  nullable: true
                  description: ID of the parent tweet/comment. null when it's an original tweet
                  example: '68240ccd292f934777bd5dfb'
                hashtags:
                  type: array
                  items:
                    type: string
                  description: Array of hashtags used in the tweet
                  example: ['Pham Lam Ha Vu']
                mentions:
                  type: array
                  format: MongoDB ObjectId
                  items:
                    type: string
                  description: Array of user IDs that are mentioned in the tweet
                  example: ['68205e19d3d79ee7d9fc10db']
                medias:
                  type: array
                  items:
                    type: object
                    properties:
                      url:
                        type: string
                        format: url
                        description: URL of the media file
                        example: 'https://www.w3schools.com/html/mov_bbb.mp4'
                      type:
                        type: integer
                        description: Media type (0 for image, 1 for video)
                        example: 1
                  description: Array of media attachments
                  example:
                    - url: 'https://www.w3schools.com/html/mov_bbb.mp4'
                      type: 1
                    - url: 'https://picsum.photos/200'
                      type: 0
      responses:
        '200':
          description: Tweet created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Create tweet body successfully'
                  result:
                    $ref: '#/components/schemas/Tweet'

        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Access token is required'
        '422':
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                type: object
                required:
                  - message
                  - errors
                properties:
                  message:
                    type: string
                    description: Error message indicating validation failure
                    example: 'Validation error'
                  errors:
                    type: object
                    description: Object containing field-specific validation errors
                    additionalProperties:
                      type: object
                      required:
                        - type
                        - value
                        - msg
                        - path
                        - location
                      properties:
                        type:
                          type: string
                          description: Type of validation error
                          example: 'field'
                        value:
                          type: array
                          items:
                            type: string
                          description: Array of error values or codes
                          example: ['WrongFormat']
                        msg:
                          type: string
                          description: Human-readable error message
                          example: 'Medias must be a valid array of media objects'
                        path:
                          type: string
                          description: Field path that caused the error
                          example: 'medias'
                        location:
                          type: string
                          description: Location of the error in the request
                          example: 'body'
                    example:
                      medias:
                        type: 'field'
                        value: ['WrongFormat']
                        msg: 'Medias must be a valid array of media objects'
                        path: 'medias'
                        location: 'body'
  /tweets/{tweet_id}:
    get:
      tags:
        - tweets
      summary: Get a tweet by ID
      operationId: getTweetById
      security:
        - BearerAuth: []
        - {}
      parameters:
        - name: tweet_id
          in: path
          required: true
          schema:
            type: string
            format: MongoDB ObjectId
            example: '68240ccd292f934777bd5dfb'
      responses:
        '200':
          description: Tweet retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Get tweet successfully'
                  result:
                    type: object
                    properties:
                      _id:
                        type: string
                        description: Unique identifier for the created tweet
                        format: MongoDB ObjectId
                        example: '688324677f7eef1aa5276cf3'
                      user_id:
                        type: string
                        description: ID of the user who created the tweet
                        format: MongoDB ObjectId
                        example: '687f573fb7350b9acf71039b'
                      type:
                        $ref: '#/components/schemas/TweetType'
                      audience:
                        $ref: '#/components/schemas/TweetAudience'
                      content:
                        type: string
                        description: The text content of the tweet/comment
                        example: 'This is child comment, created for retweet test'
                      parent_id:
                        type: string
                        nullable: true
                        description: ID of the parent tweet/comment. null when it's an original tweet
                        format: MongoDB ObjectId
                        example: '68240ccd292f934777bd5dfb'
                      hashtags:
                        type: array
                        items:
                          type: string
                        format: MongoDB ObjectId
                        description: Array of hashtag IDs used in the tweet
                        example: ['688324677f7eef1aa5276cf2']
                      mentions:
                        type: array
                        items:
                          type: string
                        description: Array of user IDs that are mentioned in the tweet
                        example: ['68205e19d3d79ee7d9fc10db']
                      medias:
                        type: array
                        items:
                          type: string
                        description: Array of media attachment IDs
                        example: []
                      guest_views:
                        type: integer
                        description: Number of views from guest users
                        example: 10
                      user_views:
                        type: integer
                        description: Number of views from registered users
                        example: 40
                      created_at:
                        type: string
                        format: ISO8601
                        description: Timestamp when the tweet was created
                        example: '2025-07-25T06:29:59.749Z'
                      updated_at:
                        type: string
                        format: ISO8601
                        description: Timestamp when the tweet was last updated
                        example: '2025-07-25T06:29:59.749Z'
                      bookmarks:
                        type: integer
                        example: 0
                      likes:
                        type: integer
                        example: 0
                      retweet_count:
                        type: integer
                        example: 0
                      comment_count:
                        type: integer
                        example: 15
                      quote_count:
                        type: integer
                        example: 2
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Invalid tweetID'
        '404':
          description: Tweet not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Tweet not found'
        '401':
          description: Unauthorized or tweet's audience is TwitterCircle while not logged in
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Access token is required'
  /tweets/{tweet_id}/children:
    get:
      tags:
        - tweets
      summary: Get tweet's comments
      operationId: getTweetChildrenById
      security:
        - BearerAuth: []
        - {}
      parameters:
        - name: tweet_id
          in: path
          required: true
          schema:
            type: string
            format: MongoDB ObjectId
          example: '68240ccd292f934777bd5dfb'
        - name: page
          in: query
          required: false
          schema:
            type: integer
            default: 1
          example: 1
        - name: limit
          in: query
          required: false
          schema:
            type: integer
            default: 10
          example: 3
        - name: tweet_type
          in: query
          required: false
          schema:
            type: integer
            default: 0
          example: 2
      responses:
        '200':
          description: Child comments retrieved successfully
          content:
            application/json:
              schema:
                type: object
                required:
                  - message
                  - result
                properties:
                  message:
                    type: string
                    description: Success message
                    example: 'Get tweet children successfully'
                  result:
                    type: object
                    properties:
                      tweets:
                        type: array
                        items:
                          type: object
                          properties:
                            _id:
                              type: string
                              format: MongoDB ObjectId
                              description: Unique identifier for the tweet
                              example: '68240d40292f934777bd5dfd'
                            user_id:
                              type: string
                              format: MongoDB ObjectId
                              description: ID of the user who created the tweet
                              example: '6804b34b67a900679012e9fb'
                            type:
                              $ref: '#/components/schemas/TweetType'
                            audience:
                              $ref: '#/components/schemas/TweetAudience'
                            content:
                              type: string
                              description: The text content of the tweet
                              example: 'This is child comment, created for retweet test'
                            parent_id:
                              type: string
                              format: MongoDB ObjectId
                              nullable: true
                              description: ID of the parent tweet
                              example: '68240ccd292f934777bd5dfb'
                            hashtags:
                              type: array
                              items:
                                type: object
                                required:
                                  - _id
                                  - name
                                  - created_at
                                properties:
                                  _id:
                                    type: string
                                    format: MongoDB ObjectId
                                    description: Hashtag ID
                                    example: '68240d3f292f934777bd5dfc'
                                  name:
                                    type: string
                                    description: Hashtag name
                                    example: 'Pham Lam Ha Vu'
                                  created_at:
                                    type: string
                                    format: date-time
                                    description: When the hashtag was created
                                    example: '2025-05-14T03:25:51.917Z'
                              description: Array of hashtag objects
                            mentions:
                              type: array
                              items:
                                type: object
                                properties:
                                  _id:
                                    type: string
                                    format: MongoDB ObjectId
                                    description: User ID
                                    example: '68205e19d3d79ee7d9fc10db'
                                  name:
                                    type: string
                                    description: User's full name
                                    example: 'Pham Lam Ha Vu'
                                  username:
                                    type: string
                                    description: User's username
                                    example: 'user68205e19d3d79ee7d9fc10db'
                                  email:
                                    type: string
                                    format: email
                                    description: User's email
                                    example: 'ngpham45@gmail.com'
                              description: Array of mentioned user objects
                            medias:
                              type: array
                              items:
                                type: object
                              description: Array of media attachments
                              example: []
                            guest_views:
                              type: integer
                              description: Number of views from guest users
                              example: 4
                            user_views:
                              type: integer
                              description: Number of views from registered users
                              example: 19
                            created_at:
                              type: string
                              format: date-time
                              description: When the tweet was created
                              example: '2025-05-14T03:25:52.141Z'
                            updated_at:
                              type: string
                              format: date-time
                              description: When the tweet was last updated
                              example: '2025-07-25T09:34:26.645Z'
                            bookmarks:
                              type: integer
                              description: Number of bookmarks
                              example: 0
                            likes:
                              type: integer
                              description: Number of likes
                              example: 0
                            retweet_count:
                              type: integer
                              description: Number of retweets
                              example: 0
                            comment_count:
                              type: integer
                              description: Number of comments
                              example: 0
                            quote_count:
                              type: integer
                              description: Number of quote tweets
                              example: 0
                            views:
                              type: integer
                              description: Total number of views
                              example: 22
                        description: Array of child tweets/comments
                      tweet_type:
                        type: integer
                        description: Type of tweets in the response
                        example: 2
                      limit:
                        type: integer
                        description: Number of tweets per page
                        example: 3
                      page:
                        type: integer
                        description: Current page number
                        example: 1
                      total_page:
                        type: integer
                        description: Total number of pages
                        example: 5
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Invalid tweetID'
        '404':
          description: Tweet not found or no children found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Tweet not found'
  /tweets/?limit={limit}&page={page_no}:
    get:
      tags:
        - tweets
      summary: Get newfeeds (from followers)
      operationId: getAllTweets
      security:
        - BearerAuth: []
        - {}
      parameters:
        - name: limit
          in: query
          required: false
          schema:
            type: integer
            default: 10
            example: 10
        - name: page_no
          in: query
          required: false
          schema:
            type: integer
            default: 1
            example: 1
      responses:
        '200':
          description: Tweets retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Get all tweets successfully'
                  result:
                    type: array
                    items:
                      $ref: '#/components/schemas/Tweet'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Access token is required'

  /bookmarks:
    post:
      tags:
        - bookmarks
      summary: Bookmark a tweet
      operationId: bookmarkTweet
      security:
        - BearerAuth: []
      requestBody:
        description: The tweet ID to bookmark
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                tweet_id:
                  type: string
                  format: MongoDB ObjectId
                  example: '681e1641a726496cbfa426e8'
      responses:
        '200':
          description: Bookmarked tweet successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Bookmarked tweet successfully
                  result:
                    type: object
                    properties:
                      _id:
                        type: string
                        format: MongoDB ObjectId
                        example: 68836d0b8fe95758e36461ca
                      user_id:
                        type: string
                        format: MongoDB ObjectId
                        example: '687f573fb7350b9acf71039b'
                      tweet_id:
                        type: string
                        format: MongoDB ObjectId
                        example: '681e1641a726496cbfa426e8'
                      created_at:
                        type: string
                        format: ISO8601
                        example: '2025-07-25T11:39:55.296Z'
        '404':
          description: Tweet not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Tweet not found'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'User not verified'
  /unbookmarks/tweets/{tweet_id}:
    delete:
      tags:
        - bookmarks
      summary: Unbookmark a tweet
      operationId: unbookmarkTweet
      security:
        - BearerAuth: []
      parameters:
        - name: tweet_id
          in: path
          required: true
          schema:
            type: string
            format: MongoDB ObjectId
            example: '681e1641a726496cbfa426e8'
      responses:
        '200':
          description: Unbookmarked tweet successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Unbookmarked tweet successfully
        '404':
          description: Tweet not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Tweet not found'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Invalid tweetID'

  /likes:
    post:
      tags:
        - likes
      summary: Like a tweet
      operationId: likeTweet
      security:
        - BearerAuth: []
      requestBody:
        description: The tweet ID to like
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                tweet_id:
                  type: string
                  format: MongoDB ObjectId
                  example: '681df9acd24199be6642c927'
      responses:
        '200':
          description: Liked tweet successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Liked tweet successfully
                  result:
                    type: object
                    properties:
                      _id:
                        type: string
                        format: MongoDB ObjectId
                        example: 6883707a7775c3d33368e778
                      tweet_id:
                        type: string
                        format: MongoDB ObjectId
                        example: '681df9acd24199be6642c927'
                      user_id:
                        type: string
                        format: MongoDB ObjectId
                        example: '687f573fb7350b9acf71039b'
                      created_at:
                        type: string
                        format: ISO8601
                        example: '2025-07-25T11:54:34.667Z'
        '404':
          description: Tweet not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Tweet not found'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'User not verified'
  /likes/tweets/{tweet_id}:
    delete:
      tags:
        - likes
      summary: Unlike a tweet
      operationId: unlikeTweet
      security:
        - BearerAuth: []
      parameters:
        - name: tweet_id
          in: path
          required: true
          schema:
            type: string
            format: MongoDB ObjectId
            example: '681df9acd24199be6642c927'
      responses:
        '200':
          description: Unliked tweet successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Unliked tweet successfully
                  result:
                    type: object
                    properties:
                      _id:
                        type: string
                        format: MongoDB ObjectId
                        example: 6883707a7775c3d33368e778
                      tweet_id:
                        type: string
                        format: MongoDB ObjectId
                        example: 681df9acd24199be6642c927
                      user_id:
                        type: string
                        format: MongoDB ObjectId
                        example: 687f573fb7350b9acf71039b
                      created_at:
                        type: string
                        format: ISO8601
                        example: '2025-07-25T11:54:34.667Z'
        '404':
          description: Tweet not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Tweet not found'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Invalid tweetID'

  /search:
    get:
      tags:
        - search
      summary: Search tweets and users
      operationId: search
      security:
        - BearerAuth: []
      parameters:
        - name: content
          in: query
          required: true
          schema:
            type: string
          example: accusator
        - name: limit
          in: query
          required: false
          schema:
            type: integer
            default: 10
          example: 2
        - name: page
          in: query
          required: false
          schema:
            type: integer
            default: 1
          example: 1
        - name: people_follow
          in: query
          required: false
          schema:
            type: boolean
          example: false
      responses:
        '200':
          description: Searched successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Searched successfully
                  result:
                    type: object
                    properties:
                      tweets:
                        type: array
                        items:
                          type: object
                          properties:
                            _id:
                              type: string
                              example: 6825b45db002e112f23248fe
                            user_id:
                              type: string
                              example: 6825b42db002e112f23231a3
                            type:
                              type: integer
                              example: 0
                            audience:
                              type: integer
                              example: 0
                            content:
                              type: string
                              example: 'Desidero adipiscor degero calco una xiphias consuasor. ...'
                            parent_id:
                              type: string
                              nullable: true
                              example: null
                            hashtags:
                              type: array
                              items:
                                type: object
                                properties:
                                  _id:
                                    type: string
                                    example: 6825b433b002e112f232333c
                                  name:
                                    type: string
                                    example: NodeJS
                                  created_at:
                                    type: string
                                    format: date-time
                                    example: 2025-05-15T09:30:27.850Z
                            mentions:
                              type: array
                              items:
                                type: string
                              example: []
                            medias:
                              type: array
                              items:
                                type: object
                                properties:
                                  type:
                                    type: integer
                                    example: 0
                                  url:
                                    type: string
                                    format: uri
                                    example: https://loremflickr.com/539/1966?lock=8120298342140735
                            guest_views:
                              type: integer
                              example: 0
                            user_views:
                              type: integer
                              example: 5
                            created_at:
                              type: string
                              format: date-time
                              example: 2025-05-15T09:31:09.475Z
                            updated_at:
                              type: string
                              format: date-time
                              example: 2025-07-25T12:04:04.478Z
                            user:
                              type: object
                              properties:
                                _id:
                                  type: string
                                  example: 6825b42db002e112f23231a3
                                name:
                                  type: string
                                  example: Herminia46
                                email:
                                  type: string
                                  example: Libbie.Pfeffer@gmail.com
                                created_at:
                                  type: string
                                  format: date-time
                                  example: 2025-05-15T09:30:21.075Z
                                updated_at:
                                  type: string
                                  format: date-time
                                  example: 2025-05-15T09:30:21.075Z
                                verify:
                                  type: integer
                                  example: 1
                                bio:
                                  type: string
                                  example: ''
                                location:
                                  type: string
                                  example: ''
                                website:
                                  type: string
                                  example: ''
                                username:
                                  type: string
                                  example: user6825b42db002e112f23231a3
                                avatar:
                                  type: string
                                  example: ''
                                cover_photo:
                                  type: string
                                  example: ''
                            bookmarks:
                              type: integer
                              example: 0
                            likes:
                              type: integer
                              example: 0
                            retweet_count:
                              type: integer
                              example: 0
                            comment_count:
                              type: integer
                              example: 0
                            quote_count:
                              type: integer
                              example: 0
                            views:
                              type: integer
                              example: 4
                      limit:
                        type: integer
                        example: 2
                      page:
                        type: integer
                        example: 1
                      total_pages:
                        type: integer
                        example: 321

  /conversations/receiver/{receiver_id}:
    get:
      tags:
        - conversations
      summary: Get conversations for a receiver
      parameters:
        - name: receiver_id
          in: path
          required: true
          schema:
            type: string
            format: MongoDB ObjectId
          example: 684ce37d83642ce3fe2c1eb3
        - name: limit
          in: query
          required: false
          schema:
            type: integer
            default: 10
          example: 3
        - name: page
          in: query
          required: false
          schema:
            type: integer
            default: 1
          example: 3
      responses:
        '200':
          description: Get conversations successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Get conversations successfully
                  result:
                    type: object
                    properties:
                      limit:
                        type: integer
                        example: 3
                      page:
                        type: integer
                        example: 3
                      total_page:
                        type: integer
                        example: 20
                      conversations:
                        type: array
                        items:
                          type: object
                          properties:
                            _id:
                              type: string
                              format: MongoDB ObjectId
                              example: 686ccf30d579f697220b70da
                            sender_id:
                              type: string
                              format: MongoDB ObjectId
                              example: 684ce37d83642ce3fe2c1eb3
                            receiver_id:
                              type: string
                              format: MongoDB ObjectId
                              example: 6846a922c8d6c60c29ec92d3
                            content:
                              type: string
                              example: "9"
                            created_at:
                              type: string
                              format: ISO8601
                              example: '2025-07-08T07:56:32.605Z'
                            updated_at:
                              type: string
                              format: ISO8601
                              example: '2025-07-08T07:56:32.605Z'
              example:
                message: Get conversations successfully
                result:
                  limit: 3
                  page: 3
                  total_page: 20
                  conversations:
                    - _id: 686ccf30d579f697220b70da
                      sender_id: 684ce37d83642ce3fe2c1eb3
                      receiver_id: 6846a922c8d6c60c29ec92d3
                      content: "9"
                      created_at: '2025-07-08T07:56:32.605Z'
                      updated_at: '2025-07-08T07:56:32.605Z'
                    - _id: 686ccf30d579f697220b70d9
                      sender_id: 684ce37d83642ce3fe2c1eb3
                      receiver_id: 6846a922c8d6c60c29ec92d3
                      content: "8"
                      created_at: '2025-07-08T07:56:32.172Z'
                      updated_at: '2025-07-08T07:56:32.172Z'
                    - _id: 686ccf2fd579f697220b70d8
                      sender_id: 684ce37d83642ce3fe2c1eb3
                      receiver_id: 6846a922c8d6c60c29ec92d3
                      content: "7"
                      created_at: '2025-07-08T07:56:31.885Z'
                      updated_at: '2025-07-08T07:56:31.885Z'

components:
  schemas:
    LoginBody:
      type: object
      properties:
        email:
          type: string
          example: ngpham83@gmail.com
        password:
          type: string
          example: Phuong129iii@@
    RegisterBody:
      type: object
      properties:
        email:
          type: string
          example: 'ngpham84@gmail.com'
        password:
          type: string
          example: 'Phuong129iii@@'
        confirm_password:
          type: string
          example: 'Phuong129iii@@'
        name:
          type: string
          example: 'Lam Uyen Phuong'
        date_of_birth:
          type: string
          format: ISO8601
          example: '2020-06-06T08:26:33.781Z'
    AuthenticateSuccessfully:
      type: object
      properties:
        result:
          type: object
          properties:
            access_token:
              type: string
              example: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNjg0NmE5MjJjOGQ2YzYwYzI5ZWM5MmQzIiwidG9rZW5fdHlwZSI6MCwidmVyaWZ5IjoxLCJpYXQiOjE3NTI1ODk5MzYsImV4cCI6MTc1MjU4OTk2Nn0.N0NpQZDcu-gMpXLApVimd0etDPJoz7cp6ksGsdbP1WA'
            refresh_token:
              type: string
              example: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNjg0NmE5MjJjOGQ2YzYwYzI5ZWM5MmQzIiwidG9rZW5fdHlwZSI6MSwidmVyaWZ5IjoxLCJpYXQiOjE3NTI1ODk5MzYsImV4cCI6MTc2MTIyOTkzNn0.C4W_Me1Di-owhrpj1VJ6j-ImoPtWMy6QMPT6R-uJ4a8'
    User:
      type: object
      properties:
        msg:
          type: string
          example: 'Get my profile success'
        result:
          type: object
          properties:
            _id:
              type: string
              format: MongoDB ObjectId
              example: '684ce37d83642ce3fe2c1eb3'
            name:
              type: string
              example: 'Pham Lam Ha Vu'
            email:
              type: string
              example: 'ngpham82@gmail.com'
            date_of_birth:
              type: string
              format: ISO8601
              example: '2020-06-06T08:26:33.781Z'
            created_at:
              type: string
              format: ISO8601
              example: '2025-06-14T02:50:37.452Z'
            updated_at:
              type: string
              format: ISO8601
              example: '2025-06-14T13:36:00.963Z'
            forgot_password_token:
              type: string
              example: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNjg0Y2UzN2Q4MzY0MmNlM2ZlMmMxZWIzIiwidG9rZW5fdHlwZSI6MiwidmVyaWZ5IjowLCJpYXQiOjE3NDk4NzI4MjIsImV4cCI6MTc0OTk1OTIyMn0.SJeHCEqSNH12Ph1xYE7a1Q9zKyw-mWalw4v-4RdNIv4'
            verify:
              allOf:
                - $ref: '#/components/schemas/UserVerifyStatus'
              example: 1
            twitter_circle:
              type: array
              items:
                type: string
                format: MongoDB ObjectId
              example: ['67eea4b71938eb2f7eef13fc', '67eea4b71938eb2f7eef13fd']
            bio:
              type: string
              example: 'This is my bio'
            location:
              type: string
              example: ''
            website:
              type: string
              example: ''
            username:
              type: string
              example: 'user684ce37d83642ce3fe2c1eb3'
            avatar:
              type: string
              example: 'http://localhost:4000/PLHV_avatar.jpg'
            cover_photo:
              type: string
              example: 'http://localhost:4000/PLHV_cover_photo.jpg'
    Tweet:
      type: object
      properties:
        _id:
          type: string
          description: Unique identifier for the created tweet
          format: MongoDB ObjectId
          example: '688324677f7eef1aa5276cf3'
        user_id:
          type: string
          description: ID of the user who created the tweet
          format: MongoDB ObjectId
          example: '687f573fb7350b9acf71039b'
        type:
          $ref: '#/components/schemas/TweetType'
        audience:
          $ref: '#/components/schemas/TweetAudience'
        content:
          type: string
          description: The text content of the tweet/comment
          example: 'This is child comment, created for retweet test'
        parent_id:
          type: string
          nullable: true
          description: ID of the parent tweet/comment. null when it's an original tweet
          format: MongoDB ObjectId
          example: '68240ccd292f934777bd5dfb'
        hashtags:
          type: array
          items:
            type: string
          format: MongoDB ObjectId
          description: Array of hashtag IDs used in the tweet
          example: ['688324677f7eef1aa5276cf2']
        mentions:
          type: array
          items:
            type: string
          description: Array of user IDs that are mentioned in the tweet
          example: ['68205e19d3d79ee7d9fc10db']
        medias:
          type: array
          items:
            type: string
          description: Array of media attachment IDs
          example: []
        guest_views:
          type: integer
          description: Number of views from guest users
          example: 0
        user_views:
          type: integer
          description: Number of views from registered users
          example: 0
        created_at:
          type: string
          format: ISO8601
          description: Timestamp when the tweet was created
          example: '2025-07-25T06:29:59.749Z'
        updated_at:
          type: string
          format: ISO8601
          description: Timestamp when the tweet was last updated
          example: '2025-07-25T06:29:59.749Z'
    UserVerifyStatus:
      type: integer
      description: |
        User verification status:
        - 0 = Unverified
        - 1 = Verified
        - 2 = Banned
      enum: [0, 1, 2]
    MediaType:
      type: integer
      description: |
        Media type:
        - 0 = Image
        - 1 = Video
        - 2 = HLS
      enum: [0, 1, 2]
    EncodingStatus:
      type: integer
      description: |
        Video encoding status:
        - 0 = Pending
        - 1 = Processing
        - 2 = Successfully
        - 3 = Failed
      enum: [0, 1, 2, 3]
    TweetType:
      type: integer
      description: |
        Tweet type:
        - 0 = Tweet
        - 1 = Retweet
        - 2 = Comment
        - 3 = QuoteTweet
      enum: [0, 1, 2, 3]
    TweetAudience:
      type: integer
      description: |
        Audience visibility setting:
        - 0 = Everyone
        - 1 = TwitterCircle
      enum: [0, 1]
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: |
        Use the `Bearer` scheme to authenticate requests. Include the token in the `Authorization` header as follows:
        ```
        Authorization: Bearer <your_token>
        ```
